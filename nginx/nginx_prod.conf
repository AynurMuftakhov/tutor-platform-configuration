worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 10m;
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    resolver 127.0.0.11;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    upstream users-upstream {
        server users-service:8081;
    }

    upstream lessons-upstream {
        server lessons-service:8082;
    }

    upstream notifications-upstream {
        server notifications-service:8083;
    }

    upstream vocabulary-upstream {
        server vocabulary-service:8084;
    }

    upstream video-upstream {
        server video-service:8085;
    }

    server {
        listen 80;
        server_name auth.speakshire.com;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name auth.speakshire.com;

        ssl_certificate     /etc/letsencrypt/live/auth.speakshire.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/auth.speakshire.com/privkey.pem;

        location / {
            proxy_pass http://keycloak:7080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }

    server {
        listen 80;
        server_name speakshire.com www.speakshire.com;

        location / {
            proxy_pass http://frontend-service:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cache_bypass $http_upgrade;
        }
    }

    server {
        listen 80;
        server_name api.speakshire.com;

        location /users-service/avatars/ {
            proxy_pass http://users-service/avatars/;
            add_header 'Access-Control-Allow-Origin' '*' always;
        }

        location /users-service/ {
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak:7080/realms/tutor-platform/.well-known/openid-configuration",
                    client_id = "tutor-platform-frontend",
                    bearer_only = true
                }

                ngx.req.clear_header("X-User")

                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.log(ngx.ERR, "Authentication error: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local username = res.email or res.preferred_username or ""
                ngx.req.set_header("X-User", username)
            }
            proxy_pass http://users-upstream/;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        location /lessons-service/ {
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak:7080/realms/tutor-platform/.well-known/openid-configuration",
                    client_id = "tutor-platform-frontend",
                    bearer_only = true
                }
                ngx.req.clear_header("X-User")

                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local username = res.email or res.preferred_username or ""
                ngx.req.set_header("X-User", username)
            }
            proxy_pass http://lessons-upstream/;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        location /notifications-service/ {
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak:7080/realms/tutor-platform/.well-known/openid-configuration",
                    client_id = "tutor-platform-frontend",
                    bearer_only = true
                }
                ngx.req.clear_header("X-User")

                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local username = res.email or res.preferred_username or ""
                ngx.req.set_header("X-User", username)
            }
            proxy_pass http://notifications-upstream/;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        location /ws/notifications {
            proxy_pass http://notifications-upstream/ws/notifications;
            proxy_http_version 1.1;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            proxy_buffering off;
            proxy_cache off;
        }

        location /vocabulary-service/ {
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak:7080/realms/tutor-platform/.well-known/openid-configuration",
                    client_id = "tutor-platform-frontend",
                    bearer_only = true
                }
                ngx.req.clear_header("X-User")

                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local username = res.email or res.preferred_username or ""
                ngx.req.set_header("X-User", username)
            }
            proxy_pass http://vocabulary-upstream/;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        location /video-service/ {
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak:7080/realms/tutor-platform/.well-known/openid-configuration",
                    client_id = "tutor-platform-frontend",
                    bearer_only = true
                }
                ngx.req.clear_header("X-User")

                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local username = res.email or res.preferred_username or ""
                ngx.req.set_header("X-User", username)
            }
            proxy_pass http://video-upstream/;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        error_log /dev/stderr debug;
        access_log /dev/stdout;
    }
}