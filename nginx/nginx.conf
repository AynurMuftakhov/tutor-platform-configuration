worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 10m;
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    resolver 127.0.0.11;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    upstream users-service {
        server users-service:8081;
    }

    upstream lessons-service {
        server lessons-service:8082;
    }

    server {
        listen 80;

        location /users-service/ {
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak:7080/realms/tutor-platform/.well-known/openid-configuration",
                    client_id = "tutor-platform-frontend", 
                    bearer_only = true
                }

                ngx.req.clear_header("X-User")

                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.log(ngx.ERR, "Authentication error: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local username = res.email or res.preferred_username or ""
                ngx.req.set_header("X-User", username)
            }
            proxy_pass http://users-service/;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        location /lessons-service/ {
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak:7080/realms/tutor-platform/.well-known/openid-configuration",
                    client_id = "tutor-platform-frontend",
                    bearer_only = true
                }
                ngx.req.clear_header("X-User")

                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local username = res.email or res.preferred_username or ""
                ngx.req.set_header("X-User", username)
            }
            proxy_pass http://lessons-service/;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        error_log /dev/stderr debug;
        access_log /dev/stdout;
    }
}