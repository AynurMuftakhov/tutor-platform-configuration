version: '3.8'

networks:
  tutor-platform-network:
    name: tutor-platform-network
    driver: bridge

services:
  keycloak:
    build:
      context: .
      dockerfile: Dockerfile.keycloak
    container_name: keycloak
    restart: always
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: "true"
      KC_LOG_LEVEL: INFO
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak_db
      KC_DB_USERNAME: sysadm
      KC_DB_PASSWORD: admin
    ports:
      - "7080:7080"
      - "7443:7443"
    networks:
      - tutor-platform-network
    depends_on:
      - postgres
    command: ["start-dev", "--http-port", "7080", "--https-port", "7443", "--import-realm"]
    volumes:
      - ./keycloak-realm.json:/opt/keycloak/data/import/keycloak-realm.json
      - ./tutorPlatformTheme:/opt/keycloak/themes/tutorPlatformTheme

  postgres:
    image: postgres:latest
    container_name: postgres-container
    restart: always
    environment:
      POSTGRES_USER: sysadm
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - tutor-platform-network

  users-service:
    build:
      context: ./users-service
    container_name: users-service
    restart: always
    ports:
      - "8081:8081"
      - "5006:5006"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/user_service
      SPRING_DATASOURCE_USERNAME: sysadm
      SPRING_DATASOURCE_PASSWORD: admin
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      JAVA_TOOL_OPTIONS: >-
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006
    depends_on:
      - postgres
    networks:
      - tutor-platform-network
    volumes:
      - user-avatars:/app/uploads/avatars
    env_file:
      - ./users-service/.env

  lessons-service:
    build:
      context: ./lessons-service
    container_name: lessons-service
    restart: always
    ports:
      - "8082:8082"
      - "5005:5005"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/lessons_service
      SPRING_DATASOURCE_USERNAME: sysadm
      SPRING_DATASOURCE_PASSWORD: admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_TOOL_OPTIONS: >-
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - postgres
    networks:
      - tutor-platform-network

  frontend-service:
    build:
      context: ./tutor-platform-frontend
    container_name: frontend-service
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./tutor-platform-frontend:/app
    networks:
      - tutor-platform-network
    environment:
      - CHOKIDAR_USEPOLLING=true

  notifications-service:
    build:
      context: notifications-service
    container_name: notifications-service
    restart: always
    ports:
      - "8083:8083"
      - "5007:5007"
    networks:
      - tutor-platform-network
    depends_on:
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/notifications_service
      SPRING_DATASOURCE_USERNAME: sysadm
      SPRING_DATASOURCE_PASSWORD: admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_TOOL_OPTIONS: >-
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007

  vocabulary-service:
    build:
      context: vocabulary-service
    container_name: vocabulary-service
    restart: always
    ports:
      - "8084:8084"
      - "5008:5008"
    networks:
      - tutor-platform-network
    depends_on:
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/vocabulary_service
      SPRING_DATASOURCE_USERNAME: sysadm
      SPRING_DATASOURCE_PASSWORD: admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_TOOL_OPTIONS: >-
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008

  video-service:
    build:
      context: video-service
    container_name: video-service
    restart: always
    ports:
      - "8085:8085"
      - "5009:5009"
    networks:
      - tutor-platform-network
    environment:
      JAVA_TOOL_OPTIONS: >-
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - users-service
      - lessons-service
    networks:
      - tutor-platform-network

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog
    restart: always
    ports:
      - "8025:8025"   # Web UI
      - "1025:1025"   # SMTP
    networks:
      - tutor-platform-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - tutor-platform-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - tutor-platform-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8088:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - tutor-platform-network

volumes:
  postgres-data:
  user-avatars:
